alert(Hello World!): The alert() method displays an alert box with a message and an OK button. The alert() method is used when you want information to come through to the user.

console.log() The console.log() method outputs a message to the web console. The message may be a single string (with optional substitution values), or it may be any one or more JavaScript objects. 

Use camelCase for naming variables in JS.

typeof : Typeof in JavaScript is an operator used for type checking and returns the data type of the operand passed to it. The operand can be any variable, function, or object whose type you want to find out using the typeof operator.
Eg.
console.log(typeof true)

Javascript is dynamically typed and we can reassign values as per our need.
Eg: 
let name = "Jane";
//Reassigning
name = "Smith";


# Declaring variables:

	let, const & var
	
	As a general rule, you should always declare variables with const, if you realize that the value of the variable needs to change, go back and change it to let. Use let when you know that the value of a variable will change. Use const for every other variable.
	When 'const' is used the declared variable is immutable where as when 'let' is used the variable is mutable.
	var is used in legacy cases.

# Template literals:

	Template literals are literals delimited with backtick ( ` ) characters, allowing for multi-line strings, string interpolation with embedded expressions, and special constructs called tagged templates.

	Eg: 	const firstName = "Harry";
		const proffesion = "teacher";
		const currentYear = 2023, birthYear = 1991;

		// Template literals

		const data = `I'm ${firstName}, a ${proffesion}, aged ${currentYear-birthYear}`;
		console.log(data)
# Conditional operators:

	Eg:
		const age = 19;
		if (age>=18) 
		{
    			console.log("Yes")
		}
		else 
		{
    			console.log("No")
		}


# Truthy and falsy values:

	In JavaScript, a truthy value is a value that is considered true when encountered in a Boolean context. All values are truthy unless they are defined as falsy. That is, all values are truthy except false, 0, -0, 0n, "", null, undefined, and NaN.


# Equality operators ( "==" vs "===" )

	"==" does loose equality comparision. 
	Eg: if('18' == 18);

	will be true, i.e '==' operator here performs type coercion

	"===" does strict equality comparision. 

	Eg: if('18' == 18);

	will be false.

# prompt():

	window.prompt() instructs the browser to display a dialog with an optional message prompting the user to input some text, and to wait until the user either submits the text or cancels the dialog.

# switch case statements:

	You can use a switch-case when: There are multiple choices for an expression. 

	syntax: 
	switch(expression) {
	case x:
		// code block
		break;
	case y:
		// code block
		break;
	default:
		// code block
	}

# Conditional (ternary) operator:
	
	Syntax:
		condition ? exprIfTrue : exprIfFalse
	Eg:
		canDrive = age >= 18 ? "Can drive" : "Cannot drive";
		console.log(canDrive);


# 'use strict;'


	Strict mode makes it easier to write "secure" JavaScript.

	Strict mode changes previously accepted "bad syntax" into real errors.


# functions:

	* These are examples of function declaration:

	function logger(){
    console.log("hello world");
	}

	logger();

	Functions with parameters:

	function fruitProcessor(apples, oranges){
    console.log(apples, oranges);
    const juice = `Juice with ${apples} apples and ${oranges} oranges is ready.`;
    return juice;
	}

	const appleJuice = fruitProcessor(4, 0);
	console.log(appleJuice);


	* Function expressions:

	const calcAge =  function(birthYear){
    return 2023-birthYear;
	}

	const age = calcAge(2001);
	console.log(age);

	The key difference between function declaration and function expressions is that in case of function declarations we can call a function before it has been declared unlike function expressions.

	* Arrow functions:

	const calcAge = birthYear=> 2023-birthYear;

	const age = calcAge(2001);
	console.log(age);


# Arrays:


	const friends = ["Harry", "Ron", "Hermione"];
	console.log(friends);

	* Length of an array:

	console.log(friends.length);

	* Replacing a specific element in the array:

	friends[1] = "Luna Lovegood";

	* push():

	Used to add elements at the end of an array.

	friends.push("Ron", "Hagrid");

	* unshift():

	Used to add elements to the beggining of an array:

	friends.unshift("Dumbledore", "Neville");
	console.log(friends);

	* pop():

	Used to drop the last element of an array:

	friends.pop();


	* shift():

	Used to remove the first element of an array:

	friends.shift();

	* indexof():

	Used to check the index of a particular element:

	console.log(friends.indexOf("Harry"));

	* includes():

	To get the Boolean value if an element is present or not present in the array:


	console.log(friends.includes("Harry"));
	Output:  true

	console.log(friends.includes("Draco"));
	Output:  false

# objects:

	In JavaScript, an object is a standalone entity, with properties and type. Compare it with a cup, for example. A cup is an object, with properties. A cup has a color, a design, weight, a material it is made of, etc. The same way, JavaScript objects can have properties, which define their characteristics.


	const harry = {
    firstName : "Harry",
    lastName : "Potter",
    age : 2023-1980,
    job : "Head of the Auror department",
    friends : ["Ron", "Hermione", "Hagrid"],
	}

	console.log(harry);


	How to add additional properties to an object?

	harry.school = "Hogwarts";

	or

	harry["patronus"] = "Stag";